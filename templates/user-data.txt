#!/bin/bash -v
apt-get update
DEBIAN_FRONTEND=noninteractive apt-get upgrade -y -o Dpkg::Options::="--force-confnew"
apt-get install -y \
  apt-transport-https \
  ca-certificates \
  build-essential \
  software-properties-common \
  unzip \
  curl \
  wget \
  gnupg \
  net-tools \
  jq \
  wireguard-dkms \
  wireguard-tools && \
  rm -rf /var/lib/apt/lists/*

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
unzip awscliv2.zip && \
rm -f awscliv2.zip && \
./aws/install

cat > /etc/wireguard/wg0.conf <<- EOF
[Interface]
Address = ${wg_server_net}
PrivateKey = ${wg_server_private_key}
ListenPort = ${wg_server_port}
PostUp = sysctl -w -q net.ipv4.ip_forward=1
PostUp = sysctl -w -q net.ipv6.conf.all.forwarding=1
PostUp = iptables -P FORWARD DROP
PostUp = ip6tables -P FORWARD DROP
PostUp = iptables -A FORWARD -i wg0 -j ACCEPT
PostUp = ip6tables -A FORWARD -i wg0 -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o ENI -j MASQUERADE
PostUp = ip6tables -t nat -A POSTROUTING -o ENI -j MASQUERADE
PostDown = sysctl -w -q net.ipv4.ip_forward=0
PostDown = sysctl -w -q net.ipv6.conf.all.forwarding=0
PostDown = iptables -P FORWARD ACCEPT
PostDown = ip6tables -P FORWARD ACCEPT
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT
PostDown = ip6tables -D FORWARD -i wg0 -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o ENI -j MASQUERADE
PostDown = ip6tables -t nat -D POSTROUTING -o ENI -j MASQUERADE

${peers}
EOF

export ENI=$(ip route get 8.8.8.8 | grep 8.8.8.8 | awk '{print $5}')
sed -i "s/ENI/$ENI/g" /etc/wireguard/wg0.conf

# Use EIP if it is provided
if [ "${use_eip}" != "disabled" ]; then
  export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
  export REGION=$(curl -fsq http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/[a-z]$//')
  aws --region $${REGION} ec2 associate-address --allocation-id ${eip_id} --instance-id $${INSTANCE_ID}
fi

# Use SSM if it is provided
if [[ "${use_ssm}" == "true" ]] && [[ ! -z "${wg_server_private_key_aws_ssm_name}" ]]; then
  export REGION=$(curl -fsq http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/[a-z]$//')
  export AWS_SSM_PARAMETER=$(aws ssm get-parameter --name "${wg_server_private_key_aws_ssm_name}" --with-decryption --region $${REGION} | jq -r .Parameter.Value)
  sed -i "s/AWS_SSM_PARAMETER/$AWS_SSM_PARAMETER/g" /etc/wireguard/wg0.conf
fi

chown -R root:root /etc/wireguard/
chmod -R og-rwx /etc/wireguard/*
sysctl -p
systemctl enable wg-quick@wg0.service
systemctl start wg-quick@wg0.service

until systemctl is-active --quiet wg-quick@wg0.service
do
  sleep 1
done

if [[ "${use_prometheus}" == "true" ]]; then
  # Install prometheus_wireguard_exporter
  wget https://github.com/vainkop/terraform-aws-wireguard/releases/download/v1.3.0/prometheus_wireguard_exporter_v3.4.2.tar.gz && \
  tar -zxvf prometheus_wireguard_exporter_v3.4.2.tar.gz prometheus_wireguard_exporter && \
  rm -fv prometheus_wireguard_exporter_v3.4.2.tar.gz && \
  mv prometheus_wireguard_exporter /usr/local/bin/prometheus_wireguard_exporter && \
  chmod +x /usr/local/bin/prometheus_wireguard_exporter

  cat <<EOF | tee /etc/systemd/system/prometheus_wireguard_exporter.service
[Unit]
Description=Prometheus WireGuard Exporter
Wants=network-online.target
After=network-online.target

[Service]
User=root
Group=root
Type=simple
ExecStart=/usr/local/bin/prometheus_wireguard_exporter -a -n /etc/wireguard/wg0.conf -p 9586

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload && \
  systemctl start prometheus_wireguard_exporter.service && \
  systemctl enable prometheus_wireguard_exporter.service

  until systemctl is-active --quiet prometheus_wireguard_exporter.service
  do
    sleep 1
  done

  # Install node_exporter
  useradd -rs /bin/false node_exporter && \
  wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz && \
  tar -zxvf node_exporter-1.1.2.linux-amd64.tar.gz node_exporter-1.1.2.linux-amd64/node_exporter && \
  rm -fv node_exporter-1.1.2.linux-amd64.tar.gz && \
  mv node_exporter-1.1.2.linux-amd64/node_exporter /usr/local/bin/node_exporter && \
  chmod +x /usr/local/bin/node_exporter && \
  chown node_exporter:node_exporter /usr/local/bin/node_exporter

  cat <<EOF | tee /etc/systemd/system/node_exporter.service
[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target

[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter --web.listen-address=":9100"

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload && \
  systemctl start node_exporter && \
  systemctl enable node_exporter

  until systemctl is-active --quiet node_exporter.service
  do
    sleep 1
  done

  # allow exporter through firewall
  ufw allow 9586
  ufw allow 9100
fi

ufw allow ssh
ufw allow ${wg_server_port}/udp
ufw --force enable
